version: 2
references:
  docker_image: &docker_image
    docker:
      - image: gableroux/unity3d:2018.2.6f1
  docker_image_android: &docker_image_android
    docker:
      - image: gableroux/unity3d:2018.3.3f1-android
  setup_unity_license_env_var: &setup_unity_license_env_var
    command: |
      mkdir -p /root/.cache/unity3d
      mkdir -p /root/.local/share/unity3d/Unity/
      openssl version
      openssl aes-256-cbc -md md5 -d -in ./ci/Unity_v2018.ulf-cipher -out /Unity_v2018.ulf -k $KEY
      export UNITY_LICENSE_CONTENT=`cat /Unity_v2018.ulf`
      echo "$UNITY_LICENSE_CONTENT" | tr -d '\r' > "/root/.local/share/unity3d/Unity/Unity_lic.ulf"
  remove_license_file: &remove_license_file
    command: |
      rm /Unity_v2018.ulf
      rm /root/.local/share/unity3d/Unity/Unity_lic.ulf
  zipArhive: &zipArhive
    command: |
      chmod -R 755 ./ci/zip.sh
      ./ci/zip.sh
jobs:
  test_editmode:
    <<: *docker_image
    steps:
      # TODO: Add git to unity image so this is not required anymore
      # this will prevent following error on 'checkout' step:
      # Either git or ssh (required by git to clone through SSH) is not installed in the image. Falling back to CircleCI's native git client but the behavior may be different from official git. If this is an issue, please use an image that has official git and ssh installed.
      - run:
          command: apt-get update && apt-get install -y git && git --version
      - checkout
      - run:
          <<: *setup_unity_license_env_var
      - run:
          environment:
            TEST_PLATFORM: editmode
          command: |
            chmod -R 755 ./ci/test.sh
            ./ci/test.sh
      - run:
          <<: *remove_license_file
      - store_artifacts:
          path: '$(pwd)/$TEST_PLATFORM-results.xml'
          destination: '$TEST_PLATFORM-results.xml'
  test_playmode:
    <<: *docker_image
    steps:
      - run:
          command: apt-get update && apt-get install -y git && git --version
      - checkout
      - run:
          <<: *setup_unity_license_env_var
      - run:
          environment:
            TEST_PLATFORM: playmode
          command: |
            chmod -R 755 ./ci/test.sh
            ./ci/test.sh
      - run:
          <<: *remove_license_file
      - store_artifacts:
          path: '$(pwd)/$TEST_PLATFORM-results.xml'
          destination: '$TEST_PLATFORM-results.xml'
  build_StandaloneWindows:
    <<: *docker_image
    steps:
      - run:
          command: |
            apt-get update && apt-get install -y git zip && git --version
      - checkout
      - run:
          <<: *setup_unity_license_env_var
      - run:
          environment:
            BUILD_TARGET: StandaloneWindows
            BUILD_NAME: SampleBuild
          command: |
            chmod -R 755 ./ci/build.sh
            ./ci/build.sh
      - run:
          <<: *remove_license_file
      - run:
          <<: *zipArhive
      - store_artifacts:
          path: './Builds/'
  build_StandaloneOSX:
    <<: *docker_image
    steps:
      - run:
          command: |
            apt-get update && apt-get install -y git zip && git --version
      - checkout
      - run:
          <<: *setup_unity_license_env_var
      - run:
          environment:
            BUILD_TARGET: StandaloneOSX
            BUILD_NAME: SampleBuild
          command: |
            chmod -R 755 ./ci/build.sh
            ./ci/build.sh
      - run:
          <<: *remove_license_file
      - run:
          <<: *zipArhive
      - store_artifacts:
          path: './Builds/'
  build_Android:
    <<: *docker_image_android
    steps:
      - run:
          command: |
            apt-get update && apt-get install -y git rbenv ruby-build build-essential curl file m4 ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev zip unzip libreadline-dev && git --version
            cd /opt && \
            wget -q https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -O android-sdk.zip && \
            unzip -q android-sdk.zip -d android-sdk-linux && \
            rm -f android-sdk.zip && \
            ls -ahl android-sdk-linux
      - checkout
      - run:
          <<: *setup_unity_license_env_var
      - run:
          environment:
            BUILD_TARGET: Android
            BUNDLE_IDENTIFIER: com.sample.circleci
            BUILD_NAME: SampleBuild
            ANDROID_HOME: /opt/android-sdk-linux
          command: |
            chmod -R 755 ./ci/build.sh
            ./ci/build.sh
      - run:
          environment:
            BUILD_TARGET: Android
            BUILD_NAME: SampleBuild
          command: |
            rbenv install 2.3.0-dev
            cp ./ci/Gemfile ./Builds/$BUILD_TARGET/Gemfile
            cd ./Builds/$BUILD_TARGET/$BUILD_NAME
            eval "$(rbenv init -)"
            rbenv local 2.3.0-dev
            rbenv rehash
            rbenv exec gem install bundler
            rbenv rehash
            bundle install --path .bundle
            bundle exec fastlane init
            bundle exec fastalen beta
      - run:
          <<: *remove_license_file
      - store_artifacts:
          path: './Builds/'
workflows:
  version: 2
  test_and_build:
    jobs:
      - build_Android
      # - build_StandaloneWindows
      # - build_StandaloneOSX
      # - test_editmode
